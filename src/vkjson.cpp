#include "vk_wrapper_auto.h"
#include "vkjson.h"
#include <string.h>

bool readVkPhysicalDeviceVulkan13Features(const Json::Value& root, VkPhysicalDeviceVulkan13Features& in)
{
	in.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES;
	in.pNext = nullptr;
	in.robustImageAccess = (VkBool32)root.get("robustImageAccess", false).asBool();
	in.inlineUniformBlock = (VkBool32)root.get("inlineUniformBlock", false).asBool();
	in.descriptorBindingInlineUniformBlockUpdateAfterBind = (VkBool32)root.get("descriptorBindingInlineUniformBlockUpdateAfterBind", false).asBool();
	in.pipelineCreationCacheControl = (VkBool32)root.get("pipelineCreationCacheControl", false).asBool();
	in.privateData = (VkBool32)root.get("privateData", false).asBool();
	in.shaderDemoteToHelperInvocation = (VkBool32)root.get("shaderDemoteToHelperInvocation", false).asBool();
	in.shaderTerminateInvocation = (VkBool32)root.get("shaderTerminateInvocation", false).asBool();
	in.subgroupSizeControl = (VkBool32)root.get("subgroupSizeControl", false).asBool();
	in.computeFullSubgroups = (VkBool32)root.get("computeFullSubgroups", false).asBool();
	in.synchronization2 = (VkBool32)root.get("synchronization2", false).asBool();
	in.textureCompressionASTC_HDR = (VkBool32)root.get("textureCompressionASTC_HDR", false).asBool();
	in.shaderZeroInitializeWorkgroupMemory = (VkBool32)root.get("shaderZeroInitializeWorkgroupMemory", false).asBool();
	in.dynamicRendering = (VkBool32)root.get("dynamicRendering", false).asBool();
	in.shaderIntegerDotProduct = (VkBool32)root.get("shaderIntegerDotProduct", false).asBool();
	in.maintenance4 = (VkBool32)root.get("maintenance4", false).asBool();
	return true;
}

bool readVkPhysicalDeviceVulkan12Features(const Json::Value& root, VkPhysicalDeviceVulkan12Features& in)
{
	in.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES;
	in.pNext = nullptr;
	in.samplerMirrorClampToEdge = (VkBool32)root.get("samplerMirrorClampToEdge", false).asBool();
	in.drawIndirectCount = (VkBool32)root.get("drawIndirectCount", false).asBool();
	in.storageBuffer8BitAccess = (VkBool32)root.get("storageBuffer8BitAccess", false).asBool();
	in.uniformAndStorageBuffer8BitAccess = (VkBool32)root.get("uniformAndStorageBuffer8BitAccess", false).asBool();
	in.storagePushConstant8 = (VkBool32)root.get("storagePushConstant8", false).asBool();
	in.shaderBufferInt64Atomics = (VkBool32)root.get("shaderBufferInt64Atomics", false).asBool();
	in.shaderSharedInt64Atomics = (VkBool32)root.get("shaderSharedInt64Atomics", false).asBool();
	in.shaderFloat16 = (VkBool32)root.get("shaderFloat16", false).asBool();
	in.shaderInt8 = (VkBool32)root.get("shaderInt8", false).asBool();
	in.descriptorIndexing = (VkBool32)root.get("descriptorIndexing", false).asBool();
	in.shaderInputAttachmentArrayDynamicIndexing = (VkBool32)root.get("shaderInputAttachmentArrayDynamicIndexing", false).asBool();
	in.shaderUniformTexelBufferArrayDynamicIndexing = (VkBool32)root.get("shaderUniformTexelBufferArrayDynamicIndexing", false).asBool();
	in.shaderStorageTexelBufferArrayDynamicIndexing = (VkBool32)root.get("shaderStorageTexelBufferArrayDynamicIndexing", false).asBool();
	in.shaderUniformBufferArrayNonUniformIndexing = (VkBool32)root.get("shaderUniformBufferArrayNonUniformIndexing", false).asBool();
	in.shaderSampledImageArrayNonUniformIndexing = (VkBool32)root.get("shaderSampledImageArrayNonUniformIndexing", false).asBool();
	in.shaderStorageBufferArrayNonUniformIndexing = (VkBool32)root.get("shaderStorageBufferArrayNonUniformIndexing", false).asBool();
	in.shaderStorageImageArrayNonUniformIndexing = (VkBool32)root.get("shaderStorageImageArrayNonUniformIndexing", false).asBool();
	in.shaderInputAttachmentArrayNonUniformIndexing = (VkBool32)root.get("shaderInputAttachmentArrayNonUniformIndexing", false).asBool();
	in.shaderUniformTexelBufferArrayNonUniformIndexing = (VkBool32)root.get("shaderUniformTexelBufferArrayNonUniformIndexing", false).asBool();
	in.shaderStorageTexelBufferArrayNonUniformIndexing = (VkBool32)root.get("shaderStorageTexelBufferArrayNonUniformIndexing", false).asBool();
	in.descriptorBindingUniformBufferUpdateAfterBind = (VkBool32)root.get("descriptorBindingUniformBufferUpdateAfterBind", false).asBool();
	in.descriptorBindingSampledImageUpdateAfterBind = (VkBool32)root.get("descriptorBindingSampledImageUpdateAfterBind", false).asBool();
	in.descriptorBindingStorageImageUpdateAfterBind = (VkBool32)root.get("descriptorBindingStorageImageUpdateAfterBind", false).asBool();
	in.descriptorBindingStorageBufferUpdateAfterBind = (VkBool32)root.get("descriptorBindingStorageBufferUpdateAfterBind", false).asBool();
	in.descriptorBindingUniformTexelBufferUpdateAfterBind = (VkBool32)root.get("descriptorBindingUniformTexelBufferUpdateAfterBind", false).asBool();
	in.descriptorBindingStorageTexelBufferUpdateAfterBind = (VkBool32)root.get("descriptorBindingStorageTexelBufferUpdateAfterBind", false).asBool();
	in.descriptorBindingUpdateUnusedWhilePending = (VkBool32)root.get("descriptorBindingUpdateUnusedWhilePending", false).asBool();
	in.descriptorBindingPartiallyBound = (VkBool32)root.get("descriptorBindingPartiallyBound", false).asBool();
	in.descriptorBindingVariableDescriptorCount = (VkBool32)root.get("descriptorBindingVariableDescriptorCount", false).asBool();
	in.runtimeDescriptorArray = (VkBool32)root.get("runtimeDescriptorArray", false).asBool();
	in.samplerFilterMinmax = (VkBool32)root.get("samplerFilterMinmax", false).asBool();
	in.scalarBlockLayout = (VkBool32)root.get("scalarBlockLayout", false).asBool();
	in.imagelessFramebuffer = (VkBool32)root.get("imagelessFramebuffer", false).asBool();
	in.uniformBufferStandardLayout = (VkBool32)root.get("uniformBufferStandardLayout", false).asBool();
	in.shaderSubgroupExtendedTypes = (VkBool32)root.get("shaderSubgroupExtendedTypes", false).asBool();
	in.separateDepthStencilLayouts = (VkBool32)root.get("separateDepthStencilLayouts", false).asBool();
	in.hostQueryReset = (VkBool32)root.get("hostQueryReset", false).asBool();
	in.timelineSemaphore = (VkBool32)root.get("timelineSemaphore", false).asBool();
	in.bufferDeviceAddress = (VkBool32)root.get("bufferDeviceAddress", false).asBool();
	in.bufferDeviceAddressCaptureReplay = (VkBool32)root.get("bufferDeviceAddressCaptureReplay", false).asBool();
	in.bufferDeviceAddressMultiDevice = (VkBool32)root.get("bufferDeviceAddressMultiDevice", false).asBool();
	in.vulkanMemoryModel = (VkBool32)root.get("vulkanMemoryModel", false).asBool();
	in.vulkanMemoryModelDeviceScope = (VkBool32)root.get("vulkanMemoryModelDeviceScope", false).asBool();
	in.vulkanMemoryModelAvailabilityVisibilityChains = (VkBool32)root.get("vulkanMemoryModelAvailabilityVisibilityChains", false).asBool();
	in.shaderOutputViewportIndex = (VkBool32)root.get("shaderOutputViewportIndex", false).asBool();
	in.shaderOutputLayer = (VkBool32)root.get("shaderOutputLayer", false).asBool();
	in.subgroupBroadcastDynamicId = (VkBool32)root.get("subgroupBroadcastDynamicId", false).asBool();
	return true;
}

bool readVkPhysicalDeviceVulkan11Features(const Json::Value& root, VkPhysicalDeviceVulkan11Features& in)
{
	in.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES;
	in.pNext = nullptr;
	in.storageBuffer16BitAccess = (VkBool32)root.get("storageBuffer16BitAccess", false).asBool();
	in.uniformAndStorageBuffer16BitAccess = (VkBool32)root.get("uniformAndStorageBuffer16BitAccess", false).asBool();
	in.storagePushConstant16 = (VkBool32)root.get("storagePushConstant16", false).asBool();
	in.storageInputOutput16 = (VkBool32)root.get("storageInputOutput16", false).asBool();
	in.multiview = (VkBool32)root.get("multiview", false).asBool();
	in.multiviewGeometryShader = (VkBool32)root.get("multiviewGeometryShader", false).asBool();
	in.multiviewTessellationShader = (VkBool32)root.get("multiviewTessellationShader", false).asBool();
	in.variablePointersStorageBuffer = (VkBool32)root.get("variablePointersStorageBuffer", false).asBool();
	in.variablePointers = (VkBool32)root.get("variablePointers", false).asBool();
	in.protectedMemory = (VkBool32)root.get("protectedMemory", false).asBool();
	in.samplerYcbcrConversion = (VkBool32)root.get("samplerYcbcrConversion", false).asBool();
	in.shaderDrawParameters = (VkBool32)root.get("shaderDrawParameters", false).asBool();
	return true;
}

bool readVkPhysicalDeviceFeatures2(const Json::Value& root, VkPhysicalDeviceFeatures2& in2)
{
	in2.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2;
	in2.pNext = nullptr;
	VkPhysicalDeviceFeatures& in = in2.features;
	in.robustBufferAccess = (VkBool32)root.get("robustBufferAccess", false).asBool();
	in.fullDrawIndexUint32 = (VkBool32)root.get("fullDrawIndexUint32", false).asBool();
	in.imageCubeArray = (VkBool32)root.get("imageCubeArray", false).asBool();
	in.independentBlend = (VkBool32)root.get("independentBlend", false).asBool();
	in.geometryShader = (VkBool32)root.get("geometryShader", false).asBool();
	in.tessellationShader = (VkBool32)root.get("tessellationShader", false).asBool();
	in.sampleRateShading = (VkBool32)root.get("sampleRateShading", false).asBool();
	in.dualSrcBlend = (VkBool32)root.get("dualSrcBlend", false).asBool();
	in.logicOp = (VkBool32)root.get("logicOp", false).asBool();
	in.multiDrawIndirect = (VkBool32)root.get("multiDrawIndirect", false).asBool();
	in.drawIndirectFirstInstance = (VkBool32)root.get("drawIndirectFirstInstance", false).asBool();
	in.depthClamp = (VkBool32)root.get("depthClamp", false).asBool();
	in.depthBiasClamp = (VkBool32)root.get("depthBiasClamp", false).asBool();
	in.fillModeNonSolid = (VkBool32)root.get("fillModeNonSolid", false).asBool();
	in.depthBounds = (VkBool32)root.get("depthBounds", false).asBool();
	in.wideLines = (VkBool32)root.get("wideLines", false).asBool();
	in.largePoints = (VkBool32)root.get("largePoints", false).asBool();
	in.alphaToOne = (VkBool32)root.get("alphaToOne", false).asBool();
	in.multiViewport = (VkBool32)root.get("multiViewport", false).asBool();
	in.samplerAnisotropy = (VkBool32)root.get("samplerAnisotropy", false).asBool();
	in.textureCompressionETC2 = (VkBool32)root.get("textureCompressionETC2", false).asBool();
	in.textureCompressionASTC_LDR = (VkBool32)root.get("textureCompressionASTC_LDR", false).asBool();
	in.textureCompressionBC = (VkBool32)root.get("textureCompressionBC", false).asBool();
	in.occlusionQueryPrecise = (VkBool32)root.get("occlusionQueryPrecise", false).asBool();
	in.pipelineStatisticsQuery = (VkBool32)root.get("pipelineStatisticsQuery", false).asBool();
	in.vertexPipelineStoresAndAtomics = (VkBool32)root.get("vertexPipelineStoresAndAtomics", false).asBool();
	in.fragmentStoresAndAtomics = (VkBool32)root.get("fragmentStoresAndAtomics", false).asBool();
	in.shaderTessellationAndGeometryPointSize = (VkBool32)root.get("shaderTessellationAndGeometryPointSize", false).asBool();
	in.shaderImageGatherExtended = (VkBool32)root.get("shaderImageGatherExtended", false).asBool();
	in.shaderStorageImageExtendedFormats = (VkBool32)root.get("shaderStorageImageExtendedFormats", false).asBool();
	in.shaderStorageImageMultisample = (VkBool32)root.get("shaderStorageImageMultisample", false).asBool();
	in.shaderStorageImageReadWithoutFormat = (VkBool32)root.get("shaderStorageImageReadWithoutFormat", false).asBool();
	in.shaderStorageImageWriteWithoutFormat = (VkBool32)root.get("shaderStorageImageWriteWithoutFormat", false).asBool();
	in.shaderUniformBufferArrayDynamicIndexing = (VkBool32)root.get("shaderUniformBufferArrayDynamicIndexing", false).asBool();
	in.shaderSampledImageArrayDynamicIndexing = (VkBool32)root.get("shaderSampledImageArrayDynamicIndexing", false).asBool();
	in.shaderStorageBufferArrayDynamicIndexing = (VkBool32)root.get("shaderStorageBufferArrayDynamicIndexing", false).asBool();
	in.shaderStorageImageArrayDynamicIndexing = (VkBool32)root.get("shaderStorageImageArrayDynamicIndexing", false).asBool();
	in.shaderClipDistance = (VkBool32)root.get("shaderClipDistance", false).asBool();
	in.shaderCullDistance = (VkBool32)root.get("shaderCullDistance", false).asBool();
	in.shaderFloat64 = (VkBool32)root.get("shaderFloat64", false).asBool();
	in.shaderInt64 = (VkBool32)root.get("shaderInt64", false).asBool();
	in.shaderInt16 = (VkBool32)root.get("shaderInt16", false).asBool();
	in.shaderResourceResidency = (VkBool32)root.get("shaderResourceResidency", false).asBool();
	in.shaderResourceMinLod = (VkBool32)root.get("shaderResourceMinLod", false).asBool();
	in.sparseBinding = (VkBool32)root.get("sparseBinding", false).asBool();
	in.sparseResidencyBuffer = (VkBool32)root.get("sparseResidencyBuffer", false).asBool();
	in.sparseResidencyImage2D = (VkBool32)root.get("sparseResidencyImage2D", false).asBool();
	in.sparseResidencyImage3D = (VkBool32)root.get("sparseResidencyImage3D", false).asBool();
	in.sparseResidency2Samples = (VkBool32)root.get("sparseResidency2Samples", false).asBool();
	in.sparseResidency4Samples = (VkBool32)root.get("sparseResidency4Samples", false).asBool();
	in.sparseResidency8Samples = (VkBool32)root.get("sparseResidency8Samples", false).asBool();
	in.sparseResidency16Samples = (VkBool32)root.get("sparseResidency16Samples", false).asBool();
	in.sparseResidencyAliased = (VkBool32)root.get("sparseResidencyAliased", false).asBool();
	in.variableMultisampleRate = (VkBool32)root.get("variableMultisampleRate", false).asBool();
	in.inheritedQueries = (VkBool32)root.get("inheritedQueries", false).asBool();
	return true;
}

bool readVkPhysicalDeviceSparseProperties(const Json::Value& root, VkPhysicalDeviceSparseProperties& in)
{
	in.residencyStandard2DBlockShape = (VkBool32)root.get("residencyStandard2DBlockShape", false).asBool();
	in.residencyStandard2DMultisampleBlockShape = (VkBool32)root.get("residencyStandard2DMultisampleBlockShape", false).asBool();
	in.residencyStandard3DBlockShape = (VkBool32)root.get("residencyStandard3DBlockShape", false).asBool();
	in.residencyAlignedMipSize = (VkBool32)root.get("residencyAlignedMipSize", false).asBool();
	in.residencyNonResidentStrict = (VkBool32)root.get("residencyNonResidentStrict", false).asBool();
	return true;
}

bool readVkPhysicalDeviceLimits(const Json::Value& root, VkPhysicalDeviceLimits& in)
{
	in.maxImageDimension1D = (uint32_t)root["maxImageDimension1D"].asInt64();
	in.maxImageDimension2D = (uint32_t)root["maxImageDimension2D"].asInt64();
	in.maxImageDimension3D = (uint32_t)root["maxImageDimension3D"].asInt64();
	in.maxImageDimensionCube = (uint32_t)root["maxImageDimensionCube"].asInt64();
	in.maxImageArrayLayers = (uint32_t)root["maxImageArrayLayers"].asInt64();
	in.maxTexelBufferElements = (uint32_t)root["maxTexelBufferElements"].asInt64();
	in.maxUniformBufferRange = (uint32_t)root["maxUniformBufferRange"].asInt64();
	in.maxStorageBufferRange = (uint32_t)root["maxStorageBufferRange"].asInt64();
	in.maxPushConstantsSize = (uint32_t)root["maxPushConstantsSize"].asInt64();
	in.maxMemoryAllocationCount = (uint32_t)root["maxMemoryAllocationCount"].asInt64();
	in.maxSamplerAllocationCount = (uint32_t)root["maxSamplerAllocationCount"].asInt64();
	in.bufferImageGranularity = (VkDeviceSize)root["bufferImageGranularity"].asUInt64();
	in.sparseAddressSpaceSize = (VkDeviceSize)root["sparseAddressSpaceSize"].asUInt64();
	in.maxBoundDescriptorSets = (uint32_t)root["maxBoundDescriptorSets"].asInt64();
	in.maxPerStageDescriptorSamplers = (uint32_t)root["maxPerStageDescriptorSamplers"].asInt64();
	in.maxPerStageDescriptorUniformBuffers = (uint32_t)root["maxPerStageDescriptorUniformBuffers"].asInt64();
	in.maxPerStageDescriptorStorageBuffers = (uint32_t)root["maxPerStageDescriptorStorageBuffers"].asInt64();
	in.maxPerStageDescriptorSampledImages = (uint32_t)root["maxPerStageDescriptorSampledImages"].asInt64();
	in.maxPerStageDescriptorStorageImages = (uint32_t)root["maxPerStageDescriptorStorageImages"].asInt64();
	in.maxPerStageDescriptorInputAttachments = (uint32_t)root["maxPerStageDescriptorInputAttachments"].asInt64();
	in.maxPerStageResources = (uint32_t)root["maxPerStageResources"].asInt64();
	in.maxDescriptorSetSamplers = (uint32_t)root["maxDescriptorSetSamplers"].asInt64();
	in.maxDescriptorSetUniformBuffers = (uint32_t)root["maxDescriptorSetUniformBuffers"].asInt64();
	in.maxDescriptorSetUniformBuffersDynamic = (uint32_t)root["maxDescriptorSetUniformBuffersDynamic"].asInt64();
	in.maxDescriptorSetStorageBuffers = (uint32_t)root["maxDescriptorSetStorageBuffers"].asInt64();
	in.maxDescriptorSetStorageBuffersDynamic = (uint32_t)root["maxDescriptorSetStorageBuffersDynamic"].asInt64();
	in.maxDescriptorSetSampledImages = (uint32_t)root["maxDescriptorSetSampledImages"].asInt64();
	in.maxDescriptorSetStorageImages = (uint32_t)root["maxDescriptorSetStorageImages"].asInt64();
	in.maxDescriptorSetInputAttachments = (uint32_t)root["maxDescriptorSetInputAttachments"].asInt64();
	in.maxVertexInputAttributes = (uint32_t)root["maxVertexInputAttributes"].asInt64();
	in.maxVertexInputBindings = (uint32_t)root["maxVertexInputBindings"].asInt64();
	in.maxVertexInputAttributeOffset = (uint32_t)root["maxVertexInputAttributeOffset"].asInt64();
	in.maxVertexInputBindingStride = (uint32_t)root["maxVertexInputBindingStride"].asInt64();
	in.maxVertexOutputComponents = (uint32_t)root["maxVertexOutputComponents"].asInt64();
	in.maxTessellationGenerationLevel = (uint32_t)root["maxTessellationGenerationLevel"].asInt64();
	in.maxTessellationPatchSize = (uint32_t)root["maxTessellationPatchSize"].asInt64();
	in.maxTessellationControlPerVertexInputComponents = (uint32_t)root["maxTessellationControlPerVertexInputComponents"].asInt64();
	in.maxTessellationControlPerVertexOutputComponents = (uint32_t)root["maxTessellationControlPerVertexOutputComponents"].asInt64();
	in.maxTessellationControlPerPatchOutputComponents = (uint32_t)root["maxTessellationControlPerPatchOutputComponents"].asInt64();
	in.maxTessellationControlTotalOutputComponents = (uint32_t)root["maxTessellationControlTotalOutputComponents"].asInt64();
	in.maxTessellationEvaluationInputComponents = (uint32_t)root["maxTessellationEvaluationInputComponents"].asInt64();
	in.maxTessellationEvaluationOutputComponents = (uint32_t)root["maxTessellationEvaluationOutputComponents"].asInt64();
	in.maxGeometryShaderInvocations = (uint32_t)root["maxGeometryShaderInvocations"].asInt64();
	in.maxGeometryInputComponents = (uint32_t)root["maxGeometryInputComponents"].asInt64();
	in.maxGeometryOutputComponents = (uint32_t)root["maxGeometryOutputComponents"].asInt64();
	in.maxGeometryOutputVertices = (uint32_t)root["maxGeometryOutputVertices"].asInt64();
	in.maxGeometryTotalOutputComponents = (uint32_t)root["maxGeometryTotalOutputComponents"].asInt64();
	in.maxFragmentInputComponents = (uint32_t)root["maxFragmentInputComponents"].asInt64();
	in.maxFragmentOutputAttachments = (uint32_t)root["maxFragmentOutputAttachments"].asInt64();
	in.maxFragmentDualSrcAttachments = (uint32_t)root["maxFragmentDualSrcAttachments"].asInt64();
	in.maxFragmentCombinedOutputResources = (uint32_t)root["maxFragmentCombinedOutputResources"].asInt64();
	in.maxComputeSharedMemorySize = (uint32_t)root["maxComputeSharedMemorySize"].asInt64();
	in.maxComputeWorkGroupCount[0] = root["maxComputeWorkGroupCount"][0].asInt64();
	in.maxComputeWorkGroupCount[1] = root["maxComputeWorkGroupCount"][1].asInt64();
	in.maxComputeWorkGroupCount[2] = root["maxComputeWorkGroupCount"][2].asInt64();
	in.maxComputeWorkGroupInvocations = (uint32_t)root["maxComputeWorkGroupInvocations"].asInt64();
	in.maxComputeWorkGroupSize[0] = root["maxComputeWorkGroupSize"][0].asInt64();
	in.maxComputeWorkGroupSize[1] = root["maxComputeWorkGroupSize"][1].asInt64();
	in.maxComputeWorkGroupSize[2] = root["maxComputeWorkGroupSize"][2].asInt64();
	in.subPixelPrecisionBits = (uint32_t)root["subPixelPrecisionBits"].asInt64();
	in.subTexelPrecisionBits = (uint32_t)root["subTexelPrecisionBits"].asInt64();
	in.mipmapPrecisionBits = (uint32_t)root["mipmapPrecisionBits"].asInt64();
	in.maxDrawIndexedIndexValue = (uint32_t)root["maxDrawIndexedIndexValue"].asInt64();
	in.maxDrawIndirectCount = (uint32_t)root["maxDrawIndirectCount"].asInt64();
	in.maxSamplerLodBias = (float)root["maxSamplerLodBias"].asFloat();
	in.maxSamplerAnisotropy = (float)root["maxSamplerAnisotropy"].asFloat();
	in.maxViewports = (uint32_t)root["maxViewports"].asInt64();
	in.maxViewportDimensions[0] = root["maxViewportDimensions"][0].asInt64();
	in.maxViewportDimensions[1] = root["maxViewportDimensions"][1].asInt64();
	in.viewportBoundsRange[0] = root["viewportBoundsRange"][0].asFloat();
	in.viewportBoundsRange[1] = root["viewportBoundsRange"][1].asFloat();
	in.viewportSubPixelBits = (uint32_t)root["viewportSubPixelBits"].asInt64();
	in.minMemoryMapAlignment = (size_t)root["minMemoryMapAlignment"].asInt64();
	in.minTexelBufferOffsetAlignment = (VkDeviceSize)root["minTexelBufferOffsetAlignment"].asUInt64();
	in.minUniformBufferOffsetAlignment = (VkDeviceSize)root["minUniformBufferOffsetAlignment"].asUInt64();
	in.minStorageBufferOffsetAlignment = (VkDeviceSize)root["minStorageBufferOffsetAlignment"].asUInt64();
	in.minTexelOffset = (int32_t)root["minTexelOffset"].asInt64();
	in.maxTexelOffset = (uint32_t)root["maxTexelOffset"].asInt64();
	in.minTexelGatherOffset = (int32_t)root["minTexelGatherOffset"].asInt64();
	in.maxTexelGatherOffset = (uint32_t)root["maxTexelGatherOffset"].asInt64();
	in.minInterpolationOffset = (float)root["minInterpolationOffset"].asFloat();
	in.maxInterpolationOffset = (float)root["maxInterpolationOffset"].asFloat();
	in.subPixelInterpolationOffsetBits = (uint32_t)root["subPixelInterpolationOffsetBits"].asInt64();
	in.maxFramebufferWidth = (uint32_t)root["maxFramebufferWidth"].asInt64();
	in.maxFramebufferHeight = (uint32_t)root["maxFramebufferHeight"].asInt64();
	in.maxFramebufferLayers = (uint32_t)root["maxFramebufferLayers"].asInt64();
	in.framebufferColorSampleCounts = (VkSampleCountFlags)root["framebufferColorSampleCounts"].asInt64();
	in.framebufferDepthSampleCounts = (VkSampleCountFlags)root["framebufferDepthSampleCounts"].asInt64();
	in.framebufferStencilSampleCounts = (VkSampleCountFlags)root["framebufferStencilSampleCounts"].asInt64();
	in.framebufferNoAttachmentsSampleCounts = (VkSampleCountFlags)root["framebufferNoAttachmentsSampleCounts"].asInt64();
	in.maxColorAttachments = (uint32_t)root["maxColorAttachments"].asInt64();
	in.sampledImageColorSampleCounts = (VkSampleCountFlags)root["sampledImageColorSampleCounts"].asInt64();
	in.sampledImageIntegerSampleCounts = (VkSampleCountFlags)root["sampledImageIntegerSampleCounts"].asInt64();
	in.sampledImageDepthSampleCounts = (VkSampleCountFlags)root["sampledImageDepthSampleCounts"].asInt64();
	in.sampledImageStencilSampleCounts = (VkSampleCountFlags)root["sampledImageStencilSampleCounts"].asInt64();
	in.storageImageSampleCounts = (VkSampleCountFlags)root["storageImageSampleCounts"].asInt64();
	in.maxSampleMaskWords = (uint32_t)root["maxSampleMaskWords"].asInt64();
	in.timestampComputeAndGraphics = (VkBool32)root["timestampComputeAndGraphics"].asBool();
	in.timestampPeriod = (float)root["timestampPeriod"].asFloat();
	in.maxClipDistances = (uint32_t)root["maxClipDistances"].asInt64();
	in.maxCullDistances = (uint32_t)root["maxCullDistances"].asInt64();
	in.maxCombinedClipAndCullDistances = (uint32_t)root["maxCombinedClipAndCullDistances"].asInt64();
	in.discreteQueuePriorities = (uint32_t)root["discreteQueuePriorities"].asInt64();
	in.pointSizeRange[0] = root["pointSizeRange"][0].asFloat();
	in.pointSizeRange[1] = root["pointSizeRange"][1].asFloat();
	in.lineWidthRange[0] = root["lineWidthRange"][0].asFloat();
	in.lineWidthRange[1] = root["lineWidthRange"][1].asFloat();
	in.pointSizeGranularity = (float)root["pointSizeGranularity"].asFloat();
	in.lineWidthGranularity = (float)root["lineWidthGranularity"].asFloat();
	in.strictLines = (VkBool32)root["strictLines"].asBool();
	in.standardSampleLocations = (VkBool32)root["standardSampleLocations"].asBool();
	in.optimalBufferCopyOffsetAlignment = (VkDeviceSize)root["optimalBufferCopyOffsetAlignment"].asUInt64();
	in.optimalBufferCopyRowPitchAlignment = (VkDeviceSize)root["optimalBufferCopyRowPitchAlignment"].asUInt64();
	in.nonCoherentAtomSize = (VkDeviceSize)root["nonCoherentAtomSize"].asUInt64();
	return true;
}

Json::Value writeVkPhysicalDeviceVulkan13Features(const VkPhysicalDeviceVulkan13Features& in)
{
	Json::Value json;
	json["robustImageAccess"] = (bool)in.robustImageAccess;
	json["inlineUniformBlock"] = (bool)in.inlineUniformBlock;
	json["descriptorBindingInlineUniformBlockUpdateAfterBind"] = (bool)in.descriptorBindingInlineUniformBlockUpdateAfterBind;
	json["pipelineCreationCacheControl"] = (bool)in.pipelineCreationCacheControl;
	json["privateData"] = (bool)in.privateData;
	json["shaderDemoteToHelperInvocation"] = (bool)in.shaderDemoteToHelperInvocation;
	json["shaderTerminateInvocation"] = (bool)in.shaderTerminateInvocation;
	json["subgroupSizeControl"] = (bool)in.subgroupSizeControl;
	json["computeFullSubgroups"] = (bool)in.computeFullSubgroups;
	json["synchronization2"] = (bool)in.synchronization2;
	json["textureCompressionASTC_HDR"] = (bool)in.textureCompressionASTC_HDR;
	json["shaderZeroInitializeWorkgroupMemory"] = (bool)in.shaderZeroInitializeWorkgroupMemory;
	json["dynamicRendering"] = (bool)in.dynamicRendering;
	json["shaderIntegerDotProduct"] = (bool)in.shaderIntegerDotProduct;
	json["maintenance4"] = (bool)in.maintenance4;
	return json;
}

Json::Value writeVkPhysicalDeviceVulkan12Features(const VkPhysicalDeviceVulkan12Features& in)
{
	Json::Value json;
	json["samplerMirrorClampToEdge"] = (bool)in.samplerMirrorClampToEdge;
	json["drawIndirectCount"] = (bool)in.drawIndirectCount;
	json["storageBuffer8BitAccess"] = (bool)in.storageBuffer8BitAccess;
	json["uniformAndStorageBuffer8BitAccess"] = (bool)in.uniformAndStorageBuffer8BitAccess;
	json["storagePushConstant8"] = (bool)in.storagePushConstant8;
	json["shaderBufferInt64Atomics"] = (bool)in.shaderBufferInt64Atomics;
	json["shaderSharedInt64Atomics"] = (bool)in.shaderSharedInt64Atomics;
	json["shaderFloat16"] = (bool)in.shaderFloat16;
	json["shaderInt8"] = (bool)in.shaderInt8;
	json["descriptorIndexing"] = (bool)in.descriptorIndexing;
	json["shaderInputAttachmentArrayDynamicIndexing"] = (bool)in.shaderInputAttachmentArrayDynamicIndexing;
	json["shaderUniformTexelBufferArrayDynamicIndexing"] = (bool)in.shaderUniformTexelBufferArrayDynamicIndexing;
	json["shaderStorageTexelBufferArrayDynamicIndexing"] = (bool)in.shaderStorageTexelBufferArrayDynamicIndexing;
	json["shaderUniformBufferArrayNonUniformIndexing"] = (bool)in.shaderUniformBufferArrayNonUniformIndexing;
	json["shaderSampledImageArrayNonUniformIndexing"] = (bool)in.shaderSampledImageArrayNonUniformIndexing;
	json["shaderStorageBufferArrayNonUniformIndexing"] = (bool)in.shaderStorageBufferArrayNonUniformIndexing;
	json["shaderStorageImageArrayNonUniformIndexing"] = (bool)in.shaderStorageImageArrayNonUniformIndexing;
	json["shaderInputAttachmentArrayNonUniformIndexing"] = (bool)in.shaderInputAttachmentArrayNonUniformIndexing;
	json["shaderUniformTexelBufferArrayNonUniformIndexing"] = (bool)in.shaderUniformTexelBufferArrayNonUniformIndexing;
	json["shaderStorageTexelBufferArrayNonUniformIndexing"] = (bool)in.shaderStorageTexelBufferArrayNonUniformIndexing;
	json["descriptorBindingUniformBufferUpdateAfterBind"] = (bool)in.descriptorBindingUniformBufferUpdateAfterBind;
	json["descriptorBindingSampledImageUpdateAfterBind"] = (bool)in.descriptorBindingSampledImageUpdateAfterBind;
	json["descriptorBindingStorageImageUpdateAfterBind"] = (bool)in.descriptorBindingStorageImageUpdateAfterBind;
	json["descriptorBindingStorageBufferUpdateAfterBind"] = (bool)in.descriptorBindingStorageBufferUpdateAfterBind;
	json["descriptorBindingUniformTexelBufferUpdateAfterBind"] = (bool)in.descriptorBindingUniformTexelBufferUpdateAfterBind;
	json["descriptorBindingStorageTexelBufferUpdateAfterBind"] = (bool)in.descriptorBindingStorageTexelBufferUpdateAfterBind;
	json["descriptorBindingUpdateUnusedWhilePending"] = (bool)in.descriptorBindingUpdateUnusedWhilePending;
	json["descriptorBindingPartiallyBound"] = (bool)in.descriptorBindingPartiallyBound;
	json["descriptorBindingVariableDescriptorCount"] = (bool)in.descriptorBindingVariableDescriptorCount;
	json["runtimeDescriptorArray"] = (bool)in.runtimeDescriptorArray;
	json["samplerFilterMinmax"] = (bool)in.samplerFilterMinmax;
	json["scalarBlockLayout"] = (bool)in.scalarBlockLayout;
	json["imagelessFramebuffer"] = (bool)in.imagelessFramebuffer;
	json["uniformBufferStandardLayout"] = (bool)in.uniformBufferStandardLayout;
	json["shaderSubgroupExtendedTypes"] = (bool)in.shaderSubgroupExtendedTypes;
	json["separateDepthStencilLayouts"] = (bool)in.separateDepthStencilLayouts;
	json["hostQueryReset"] = (bool)in.hostQueryReset;
	json["timelineSemaphore"] = (bool)in.timelineSemaphore;
	json["bufferDeviceAddress"] = (bool)in.bufferDeviceAddress;
	json["bufferDeviceAddressCaptureReplay"] = (bool)in.bufferDeviceAddressCaptureReplay;
	json["bufferDeviceAddressMultiDevice"] = (bool)in.bufferDeviceAddressMultiDevice;
	json["vulkanMemoryModel"] = (bool)in.vulkanMemoryModel;
	json["vulkanMemoryModelDeviceScope"] = (bool)in.vulkanMemoryModelDeviceScope;
	json["vulkanMemoryModelAvailabilityVisibilityChains"] = (bool)in.vulkanMemoryModelAvailabilityVisibilityChains;
	json["shaderOutputViewportIndex"] = (bool)in.shaderOutputViewportIndex;
	json["shaderOutputLayer"] = (bool)in.shaderOutputLayer;
	json["subgroupBroadcastDynamicId"] = (bool)in.subgroupBroadcastDynamicId;
	return json;
}

Json::Value writeVkPhysicalDeviceVulkan11Features(const VkPhysicalDeviceVulkan11Features& in)
{
	Json::Value json;
	json["storageBuffer16BitAccess"] = (bool)in.storageBuffer16BitAccess;
	json["uniformAndStorageBuffer16BitAccess"] = (bool)in.uniformAndStorageBuffer16BitAccess;
	json["storagePushConstant16"] = (bool)in.storagePushConstant16;
	json["storageInputOutput16"] = (bool)in.storageInputOutput16;
	json["multiview"] = (bool)in.multiview;
	json["multiviewGeometryShader"] = (bool)in.multiviewGeometryShader;
	json["multiviewTessellationShader"] = (bool)in.multiviewTessellationShader;
	json["variablePointersStorageBuffer"] = (bool)in.variablePointersStorageBuffer;
	json["variablePointers"] = (bool)in.variablePointers;
	json["protectedMemory"] = (bool)in.protectedMemory;
	json["samplerYcbcrConversion"] = (bool)in.samplerYcbcrConversion;
	json["shaderDrawParameters"] = (bool)in.shaderDrawParameters;
	return json;
}

Json::Value writeVkPhysicalDeviceFeatures2(const VkPhysicalDeviceFeatures2& in2)
{
	Json::Value json;
	const VkPhysicalDeviceFeatures& in = in2.features;
	json["robustBufferAccess"] = (bool)in.robustBufferAccess;
	json["fullDrawIndexUint32"] = (bool)in.fullDrawIndexUint32;
	json["imageCubeArray"] = (bool)in.imageCubeArray;
	json["independentBlend"] = (bool)in.independentBlend;
	json["geometryShader"] = (bool)in.geometryShader;
	json["tessellationShader"] = (bool)in.tessellationShader;
	json["sampleRateShading"] = (bool)in.sampleRateShading;
	json["dualSrcBlend"] = (bool)in.dualSrcBlend;
	json["logicOp"] = (bool)in.logicOp;
	json["multiDrawIndirect"] = (bool)in.multiDrawIndirect;
	json["drawIndirectFirstInstance"] = (bool)in.drawIndirectFirstInstance;
	json["depthClamp"] = (bool)in.depthClamp;
	json["depthBiasClamp"] = (bool)in.depthBiasClamp;
	json["fillModeNonSolid"] = (bool)in.fillModeNonSolid;
	json["depthBounds"] = (bool)in.depthBounds;
	json["wideLines"] = (bool)in.wideLines;
	json["largePoints"] = (bool)in.largePoints;
	json["alphaToOne"] = (bool)in.alphaToOne;
	json["multiViewport"] = (bool)in.multiViewport;
	json["samplerAnisotropy"] = (bool)in.samplerAnisotropy;
	json["textureCompressionETC2"] = (bool)in.textureCompressionETC2;
	json["textureCompressionASTC_LDR"] = (bool)in.textureCompressionASTC_LDR;
	json["textureCompressionBC"] = (bool)in.textureCompressionBC;
	json["occlusionQueryPrecise"] = (bool)in.occlusionQueryPrecise;
	json["pipelineStatisticsQuery"] = (bool)in.pipelineStatisticsQuery;
	json["vertexPipelineStoresAndAtomics"] = (bool)in.vertexPipelineStoresAndAtomics;
	json["fragmentStoresAndAtomics"] = (bool)in.fragmentStoresAndAtomics;
	json["shaderTessellationAndGeometryPointSize"] = (bool)in.shaderTessellationAndGeometryPointSize;
	json["shaderImageGatherExtended"] = (bool)in.shaderImageGatherExtended;
	json["shaderStorageImageExtendedFormats"] = (bool)in.shaderStorageImageExtendedFormats;
	json["shaderStorageImageMultisample"] = (bool)in.shaderStorageImageMultisample;
	json["shaderStorageImageReadWithoutFormat"] = (bool)in.shaderStorageImageReadWithoutFormat;
	json["shaderStorageImageWriteWithoutFormat"] = (bool)in.shaderStorageImageWriteWithoutFormat;
	json["shaderUniformBufferArrayDynamicIndexing"] = (bool)in.shaderUniformBufferArrayDynamicIndexing;
	json["shaderSampledImageArrayDynamicIndexing"] = (bool)in.shaderSampledImageArrayDynamicIndexing;
	json["shaderStorageBufferArrayDynamicIndexing"] = (bool)in.shaderStorageBufferArrayDynamicIndexing;
	json["shaderStorageImageArrayDynamicIndexing"] = (bool)in.shaderStorageImageArrayDynamicIndexing;
	json["shaderClipDistance"] = (bool)in.shaderClipDistance;
	json["shaderCullDistance"] = (bool)in.shaderCullDistance;
	json["shaderFloat64"] = (bool)in.shaderFloat64;
	json["shaderInt64"] = (bool)in.shaderInt64;
	json["shaderInt16"] = (bool)in.shaderInt16;
	json["shaderResourceResidency"] = (bool)in.shaderResourceResidency;
	json["shaderResourceMinLod"] = (bool)in.shaderResourceMinLod;
	json["sparseBinding"] = (bool)in.sparseBinding;
	json["sparseResidencyBuffer"] = (bool)in.sparseResidencyBuffer;
	json["sparseResidencyImage2D"] = (bool)in.sparseResidencyImage2D;
	json["sparseResidencyImage3D"] = (bool)in.sparseResidencyImage3D;
	json["sparseResidency2Samples"] = (bool)in.sparseResidency2Samples;
	json["sparseResidency4Samples"] = (bool)in.sparseResidency4Samples;
	json["sparseResidency8Samples"] = (bool)in.sparseResidency8Samples;
	json["sparseResidency16Samples"] = (bool)in.sparseResidency16Samples;
	json["sparseResidencyAliased"] = (bool)in.sparseResidencyAliased;
	json["variableMultisampleRate"] = (bool)in.variableMultisampleRate;
	json["inheritedQueries"] = (bool)in.inheritedQueries;
	return json;
}

Json::Value writeVkPhysicalDeviceSparseProperties(const VkPhysicalDeviceSparseProperties& in)
{
	Json::Value json;
	json["residencyStandard2DBlockShape"] = (bool)in.residencyStandard2DBlockShape;
	json["residencyStandard2DMultisampleBlockShape"] = (bool)in.residencyStandard2DMultisampleBlockShape;
	json["residencyStandard3DBlockShape"] = (bool)in.residencyStandard3DBlockShape;
	json["residencyAlignedMipSize"] = (bool)in.residencyAlignedMipSize;
	json["residencyNonResidentStrict"] = (bool)in.residencyNonResidentStrict;
	return json;
}

Json::Value writeVkPhysicalDeviceLimits(const VkPhysicalDeviceLimits& in)
{
	Json::Value json;
	json["maxImageDimension1D"] = (Json::Value::Int64)in.maxImageDimension1D;
	json["maxImageDimension2D"] = (Json::Value::Int64)in.maxImageDimension2D;
	json["maxImageDimension3D"] = (Json::Value::Int64)in.maxImageDimension3D;
	json["maxImageDimensionCube"] = (Json::Value::Int64)in.maxImageDimensionCube;
	json["maxImageArrayLayers"] = (Json::Value::Int64)in.maxImageArrayLayers;
	json["maxTexelBufferElements"] = (Json::Value::Int64)in.maxTexelBufferElements;
	json["maxUniformBufferRange"] = (Json::Value::Int64)in.maxUniformBufferRange;
	json["maxStorageBufferRange"] = (Json::Value::Int64)in.maxStorageBufferRange;
	json["maxPushConstantsSize"] = (Json::Value::Int64)in.maxPushConstantsSize;
	json["maxMemoryAllocationCount"] = (Json::Value::Int64)in.maxMemoryAllocationCount;
	json["maxSamplerAllocationCount"] = (Json::Value::Int64)in.maxSamplerAllocationCount;
	json["bufferImageGranularity"] = (Json::Value::UInt64)in.bufferImageGranularity;
	json["sparseAddressSpaceSize"] = (Json::Value::UInt64)in.sparseAddressSpaceSize;
	json["maxBoundDescriptorSets"] = (Json::Value::Int64)in.maxBoundDescriptorSets;
	json["maxPerStageDescriptorSamplers"] = (Json::Value::Int64)in.maxPerStageDescriptorSamplers;
	json["maxPerStageDescriptorUniformBuffers"] = (Json::Value::Int64)in.maxPerStageDescriptorUniformBuffers;
	json["maxPerStageDescriptorStorageBuffers"] = (Json::Value::Int64)in.maxPerStageDescriptorStorageBuffers;
	json["maxPerStageDescriptorSampledImages"] = (Json::Value::Int64)in.maxPerStageDescriptorSampledImages;
	json["maxPerStageDescriptorStorageImages"] = (Json::Value::Int64)in.maxPerStageDescriptorStorageImages;
	json["maxPerStageDescriptorInputAttachments"] = (Json::Value::Int64)in.maxPerStageDescriptorInputAttachments;
	json["maxPerStageResources"] = (Json::Value::Int64)in.maxPerStageResources;
	json["maxDescriptorSetSamplers"] = (Json::Value::Int64)in.maxDescriptorSetSamplers;
	json["maxDescriptorSetUniformBuffers"] = (Json::Value::Int64)in.maxDescriptorSetUniformBuffers;
	json["maxDescriptorSetUniformBuffersDynamic"] = (Json::Value::Int64)in.maxDescriptorSetUniformBuffersDynamic;
	json["maxDescriptorSetStorageBuffers"] = (Json::Value::Int64)in.maxDescriptorSetStorageBuffers;
	json["maxDescriptorSetStorageBuffersDynamic"] = (Json::Value::Int64)in.maxDescriptorSetStorageBuffersDynamic;
	json["maxDescriptorSetSampledImages"] = (Json::Value::Int64)in.maxDescriptorSetSampledImages;
	json["maxDescriptorSetStorageImages"] = (Json::Value::Int64)in.maxDescriptorSetStorageImages;
	json["maxDescriptorSetInputAttachments"] = (Json::Value::Int64)in.maxDescriptorSetInputAttachments;
	json["maxVertexInputAttributes"] = (Json::Value::Int64)in.maxVertexInputAttributes;
	json["maxVertexInputBindings"] = (Json::Value::Int64)in.maxVertexInputBindings;
	json["maxVertexInputAttributeOffset"] = (Json::Value::Int64)in.maxVertexInputAttributeOffset;
	json["maxVertexInputBindingStride"] = (Json::Value::Int64)in.maxVertexInputBindingStride;
	json["maxVertexOutputComponents"] = (Json::Value::Int64)in.maxVertexOutputComponents;
	json["maxTessellationGenerationLevel"] = (Json::Value::Int64)in.maxTessellationGenerationLevel;
	json["maxTessellationPatchSize"] = (Json::Value::Int64)in.maxTessellationPatchSize;
	json["maxTessellationControlPerVertexInputComponents"] = (Json::Value::Int64)in.maxTessellationControlPerVertexInputComponents;
	json["maxTessellationControlPerVertexOutputComponents"] = (Json::Value::Int64)in.maxTessellationControlPerVertexOutputComponents;
	json["maxTessellationControlPerPatchOutputComponents"] = (Json::Value::Int64)in.maxTessellationControlPerPatchOutputComponents;
	json["maxTessellationControlTotalOutputComponents"] = (Json::Value::Int64)in.maxTessellationControlTotalOutputComponents;
	json["maxTessellationEvaluationInputComponents"] = (Json::Value::Int64)in.maxTessellationEvaluationInputComponents;
	json["maxTessellationEvaluationOutputComponents"] = (Json::Value::Int64)in.maxTessellationEvaluationOutputComponents;
	json["maxGeometryShaderInvocations"] = (Json::Value::Int64)in.maxGeometryShaderInvocations;
	json["maxGeometryInputComponents"] = (Json::Value::Int64)in.maxGeometryInputComponents;
	json["maxGeometryOutputComponents"] = (Json::Value::Int64)in.maxGeometryOutputComponents;
	json["maxGeometryOutputVertices"] = (Json::Value::Int64)in.maxGeometryOutputVertices;
	json["maxGeometryTotalOutputComponents"] = (Json::Value::Int64)in.maxGeometryTotalOutputComponents;
	json["maxFragmentInputComponents"] = (Json::Value::Int64)in.maxFragmentInputComponents;
	json["maxFragmentOutputAttachments"] = (Json::Value::Int64)in.maxFragmentOutputAttachments;
	json["maxFragmentDualSrcAttachments"] = (Json::Value::Int64)in.maxFragmentDualSrcAttachments;
	json["maxFragmentCombinedOutputResources"] = (Json::Value::Int64)in.maxFragmentCombinedOutputResources;
	json["maxComputeSharedMemorySize"] = (Json::Value::Int64)in.maxComputeSharedMemorySize;
	json["maxComputeWorkGroupCount"] = Json::arrayValue;
	json["maxComputeWorkGroupCount"][0] = (Json::Value::Int64)in.maxComputeWorkGroupCount[0];
	json["maxComputeWorkGroupCount"][1] = (Json::Value::Int64)in.maxComputeWorkGroupCount[1];
	json["maxComputeWorkGroupCount"][2] = (Json::Value::Int64)in.maxComputeWorkGroupCount[2];
	json["maxComputeWorkGroupInvocations"] = (Json::Value::Int64)in.maxComputeWorkGroupInvocations;
	json["maxComputeWorkGroupSize"] = Json::arrayValue;
	json["maxComputeWorkGroupSize"][0] = (Json::Value::Int64)in.maxComputeWorkGroupSize[0];
	json["maxComputeWorkGroupSize"][1] = (Json::Value::Int64)in.maxComputeWorkGroupSize[1];
	json["maxComputeWorkGroupSize"][2] = (Json::Value::Int64)in.maxComputeWorkGroupSize[2];
	json["subPixelPrecisionBits"] = (Json::Value::Int64)in.subPixelPrecisionBits;
	json["subTexelPrecisionBits"] = (Json::Value::Int64)in.subTexelPrecisionBits;
	json["mipmapPrecisionBits"] = (Json::Value::Int64)in.mipmapPrecisionBits;
	json["maxDrawIndexedIndexValue"] = (Json::Value::Int64)in.maxDrawIndexedIndexValue;
	json["maxDrawIndirectCount"] = (Json::Value::Int64)in.maxDrawIndirectCount;
	json["maxSamplerLodBias"] = (float)in.maxSamplerLodBias;
	json["maxSamplerAnisotropy"] = (float)in.maxSamplerAnisotropy;
	json["maxViewports"] = (Json::Value::Int64)in.maxViewports;
	json["maxViewportDimensions"] = Json::arrayValue;
	json["maxViewportDimensions"][0] = (Json::Value::Int64)in.maxViewportDimensions[0];
	json["maxViewportDimensions"][1] = (Json::Value::Int64)in.maxViewportDimensions[1];
	json["viewportBoundsRange"] = Json::arrayValue;
	json["viewportBoundsRange"][0] = (float)in.viewportBoundsRange[0];
	json["viewportBoundsRange"][1] = (float)in.viewportBoundsRange[1];
	json["viewportSubPixelBits"] = (Json::Value::Int64)in.viewportSubPixelBits;
	json["minMemoryMapAlignment"] = (Json::Value::Int64)in.minMemoryMapAlignment;
	json["minTexelBufferOffsetAlignment"] = (Json::Value::UInt64)in.minTexelBufferOffsetAlignment;
	json["minUniformBufferOffsetAlignment"] = (Json::Value::UInt64)in.minUniformBufferOffsetAlignment;
	json["minStorageBufferOffsetAlignment"] = (Json::Value::UInt64)in.minStorageBufferOffsetAlignment;
	json["minTexelOffset"] = (Json::Value::Int64)in.minTexelOffset;
	json["maxTexelOffset"] = (Json::Value::Int64)in.maxTexelOffset;
	json["minTexelGatherOffset"] = (Json::Value::Int64)in.minTexelGatherOffset;
	json["maxTexelGatherOffset"] = (Json::Value::Int64)in.maxTexelGatherOffset;
	json["minInterpolationOffset"] = (float)in.minInterpolationOffset;
	json["maxInterpolationOffset"] = (float)in.maxInterpolationOffset;
	json["subPixelInterpolationOffsetBits"] = (Json::Value::Int64)in.subPixelInterpolationOffsetBits;
	json["maxFramebufferWidth"] = (Json::Value::Int64)in.maxFramebufferWidth;
	json["maxFramebufferHeight"] = (Json::Value::Int64)in.maxFramebufferHeight;
	json["maxFramebufferLayers"] = (Json::Value::Int64)in.maxFramebufferLayers;
	json["framebufferColorSampleCounts"] = (Json::Value::Int64)in.framebufferColorSampleCounts;
	json["framebufferDepthSampleCounts"] = (Json::Value::Int64)in.framebufferDepthSampleCounts;
	json["framebufferStencilSampleCounts"] = (Json::Value::Int64)in.framebufferStencilSampleCounts;
	json["framebufferNoAttachmentsSampleCounts"] = (Json::Value::Int64)in.framebufferNoAttachmentsSampleCounts;
	json["maxColorAttachments"] = (Json::Value::Int64)in.maxColorAttachments;
	json["sampledImageColorSampleCounts"] = (Json::Value::Int64)in.sampledImageColorSampleCounts;
	json["sampledImageIntegerSampleCounts"] = (Json::Value::Int64)in.sampledImageIntegerSampleCounts;
	json["sampledImageDepthSampleCounts"] = (Json::Value::Int64)in.sampledImageDepthSampleCounts;
	json["sampledImageStencilSampleCounts"] = (Json::Value::Int64)in.sampledImageStencilSampleCounts;
	json["storageImageSampleCounts"] = (Json::Value::Int64)in.storageImageSampleCounts;
	json["maxSampleMaskWords"] = (Json::Value::Int64)in.maxSampleMaskWords;
	json["timestampComputeAndGraphics"] = (bool)in.timestampComputeAndGraphics;
	json["timestampPeriod"] = (float)in.timestampPeriod;
	json["maxClipDistances"] = (Json::Value::Int64)in.maxClipDistances;
	json["maxCullDistances"] = (Json::Value::Int64)in.maxCullDistances;
	json["maxCombinedClipAndCullDistances"] = (Json::Value::Int64)in.maxCombinedClipAndCullDistances;
	json["discreteQueuePriorities"] = (Json::Value::Int64)in.discreteQueuePriorities;
	json["pointSizeRange"] = Json::arrayValue;
	json["pointSizeRange"][0] = (float)in.pointSizeRange[0];
	json["pointSizeRange"][1] = (float)in.pointSizeRange[1];
	json["lineWidthRange"] = Json::arrayValue;
	json["lineWidthRange"][0] = (float)in.lineWidthRange[0];
	json["lineWidthRange"][1] = (float)in.lineWidthRange[1];
	json["pointSizeGranularity"] = (float)in.pointSizeGranularity;
	json["lineWidthGranularity"] = (float)in.lineWidthGranularity;
	json["strictLines"] = (bool)in.strictLines;
	json["standardSampleLocations"] = (bool)in.standardSampleLocations;
	json["optimalBufferCopyOffsetAlignment"] = (Json::Value::UInt64)in.optimalBufferCopyOffsetAlignment;
	json["optimalBufferCopyRowPitchAlignment"] = (Json::Value::UInt64)in.optimalBufferCopyRowPitchAlignment;
	json["nonCoherentAtomSize"] = (Json::Value::UInt64)in.nonCoherentAtomSize;
	return json;
}
